version: '3.8'

services:
  # PostgreSQL Database for Inventory Service
  inventory-postgres:
    image: postgres:15-alpine
    container_name: inventory-postgres
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
    ports:
      - "5432:5432"
    volumes:
      - inventory_postgres_data:/var/lib/postgresql/data
      - ./inventory-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - synapsis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgreSQL Database for Order Service
  order-postgres:
    image: postgres:15-alpine
    container_name: order-postgres
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
    ports:
      - "5433:5432"
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
      - ./order-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - synapsis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d order_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Order Service
  redis:
    image: redis:7-alpine
    container_name: synapsis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - synapsis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: synapsis-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: synapsis
      RABBITMQ_DEFAULT_PASS: synapsis
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - synapsis-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8000:8000"  # gRPC port
      - "8001:8001"  # REST port
    environment:
      - DB_HOST=inventory-postgres
      - DB_PORT=5432
      - DB_USER=inventory_user
      - DB_PASSWORD=inventory_password
      - DB_NAME=inventory_db
      - DB_DRIVER=postgres
      - GRPC_PORT=8000
      - REST_PORT=8001
      - RABBITMQ_URL=amqp://synapsis:synapsis@rabbitmq:5672
      - LOG_LEVEL=0
      - TOPIC_RESERVE_STOCK=reserve.stock
      - TOPIC_RESERVE_STOCK_CALLBACK=reserve.stock.callback
    depends_on:
      inventory-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - synapsis-network
    restart: unless-stopped   

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8002:8002"  # gRPC port
      - "8003:8003"  # REST port
    environment:
      - DB_HOST=order-postgres
      - DB_PORT=5432
      - DB_USER=order_user
      - DB_PASSWORD=order_password
      - DB_NAME=order_db
      - DB_DRIVER=postgres
      - GRPC_PORT=8002
      - REST_PORT=8003
      - RABBITMQ_URL=amqp://synapsis:synapsis@rabbitmq:5672
      - INVENTORY_HOST=inventory-service
      - INVENTORY_PORT=8000
      - LOG_LEVEL=0
      - TOPIC_RESERVE_STOCK=reserve.stock
      - TOPIC_RESERVE_STOCK_CALLBACK=reserve.stock.callback
    depends_on:
      order-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - synapsis-network
    restart: unless-stopped

volumes:
  inventory_postgres_data:
    driver: local
  order_postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  synapsis-network:
    driver: bridge
